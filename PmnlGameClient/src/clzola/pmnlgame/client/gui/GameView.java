/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package clzola.pmnlgame.client.gui;

import clzola.pmnlgame.message.RoomMessages;
import java.awt.BorderLayout;
import javax.swing.JOptionPane;

/**
 *
 * @author Lazar
 */
public class GameView extends View {

    /**
     * Creates new form GameView
     */
    public GameView(ClientWindow window) {
        super("game", window);
        initComponents();
        
        
        this.gamePanel = new GamePanel(this);
        add(gamePanel, BorderLayout.CENTER);
        
        this.chatPanel = new ChatPanel(this);
        add(chatPanel, BorderLayout.SOUTH);
        
        this.scoreboardPanel = new ScoreboardPanel();
        add(scoreboardPanel, BorderLayout.WEST);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout(4, 4));
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public GamePanel gamePanel;
    public ChatPanel chatPanel;
    public ScoreboardPanel scoreboardPanel;
    public boolean amIAdmin;
    public boolean gameHasStarted;
    
    @Override public void load() {
        amIAdmin = false;
        gameHasStarted = false;
        window.miConnect.setEnabled(false);
        window.miDisconnect.setEnabled(true);
        window.miPlayOffline.setEnabled(false);
        window.miJoinRoom.setEnabled(false);
        window.miCreateRoom.setEnabled(false);
        window.miLeaveRoom.setEnabled(true);
        window.RoomMenu.setEnabled(true);
        window.miStartGame.setEnabled(false);
        window.miRestartGame.setEnabled(false);
        window.miAddBot.setEnabled(false);
        window.miChangePassword.setEnabled(false);
        window.miKickPlayer.setEnabled(false);
        window.miCloseGame.setEnabled(false);
        window.miAddOP.setEnabled(false);
        scoreboardPanel.nextPlayer= -1;
    }

    @Override public void unload() {
        window.miConnect.setEnabled(true);
        window.miPlayOffline.setEnabled(true);
        window.miJoinRoom.setEnabled(true);
        window.miCreateRoom.setEnabled(true);
        window.miStartGame.setEnabled(true);
        window.miRestartGame.setEnabled(true);
        window.miAddBot.setEnabled(true);
        window.miChangePassword.setEnabled(true);
        window.miKickPlayer.setEnabled(true);
        window.miCloseGame.setEnabled(true);
        window.miAddOP.setEnabled(true);
        amIAdmin = false;
        scoreboardPanel.nextPlayer= -1;
        
        scoreboardPanel.removePlayer(0,false);
        scoreboardPanel.removePlayer(1,false);
        scoreboardPanel.removePlayer(2,false);
        scoreboardPanel.removePlayer(3,false);
        chatPanel.clearChat();
    }
    
    public void processMessage(Object message) {
        switch(message.getClass().getSimpleName()) {
            case "PlayerJoinedMessage":
                {
                    RoomMessages.PlayerJoinedMessage m1 = (RoomMessages.PlayerJoinedMessage) message;
                    scoreboardPanel.addPlayer(m1.playerId, m1.index, true);
                    RoomMessages.ChatMessage m2 = new RoomMessages.ChatMessage();
                    m2.info = true; m2.chatMessage = "New player has joined a room. ("+m1.playerId+")";
                    chatPanel.addChatMessage(m2);
                }
                break;
            case "PlayerLeftMessage":
                {
                    RoomMessages.PlayerLeftMessage m1 = (RoomMessages.PlayerLeftMessage) message;
                    scoreboardPanel.removePlayer(m1.index,true);
                    RoomMessages.ChatMessage m2 = new RoomMessages.ChatMessage();
                    m2.info = true; m2.chatMessage = "Player has left a room. ("+m1.playerId+")";
                    chatPanel.addChatMessage(m2);
                }
                break;
            case "YouAreAdminMessage":
                {
                    amIAdmin = true;
                    
                    window.miAddBot.setEnabled(true);
                    window.miChangePassword.setEnabled(true);
                    window.miKickPlayer.setEnabled(true);
                    window.miAddOP.setEnabled(true); 
                    
                    if(gameHasStarted) {
                        window.miStartGame.setEnabled(false);
                        window.miRestartGame.setEnabled(true);
                        window.miCloseGame.setEnabled(true);
                    }
                    
                    RoomMessages.ChatMessage m1 = new RoomMessages.ChatMessage();
                    m1.info = true; m1.chatMessage = "You are admin of this room.";
                    chatPanel.addChatMessage(m1);
                }
                break;
            case "ChatMessage":
                {
                    RoomMessages.ChatMessage m1 = (RoomMessages.ChatMessage) message;
                    chatPanel.addChatMessage(m1);
                }
                break;
            case "YouAreNextMessage":
                {
                    gamePanel.play();
                    RoomMessages.ChatMessage m1 = new RoomMessages.ChatMessage();
                    m1.info = true; m1.chatMessage = "You are next.";
                    chatPanel.addChatMessage(m1);
                }
                break;
            case "PlayersListMessage":
                {
                    RoomMessages.PlayersListMessage m1 = (RoomMessages.PlayersListMessage) message;
                    for(int i=0; i<m1.players.length; i++)
                        if( m1.players[i] != null)
                            scoreboardPanel.addPlayer(m1.players[i], m1.indexes[i], false);
                }
                break;
            case "LettersListMessage":
                {
                    RoomMessages.LettersListMessage m1 = (RoomMessages.LettersListMessage) message;
                    for(int i=0; i<m1.idx.length; i++) {
                        gamePanel.addLetter(m1.idx[i], m1.x[i], m1.y[i]);
                    }
                    
                    gameHasStarted = true;
                    
                }
                break;
            case "StartGameMessage":
                {
                    if(amIAdmin) {
                        window.miStartGame.setEnabled(true);
                        RoomMessages.ChatMessage m1 = new RoomMessages.ChatMessage();
                        m1.info = true; m1.chatMessage = "Room is full, you may start game now.";
                        chatPanel.addChatMessage(m1);
                    }
                }
                break;
            case "GameStartedMessage":
                {
                    gamePanel.waitYourTurn();
                    gameHasStarted = true;
                    RoomMessages.ChatMessage m1 = new RoomMessages.ChatMessage();
                    m1.info = true; m1.chatMessage = "Admin has started the game.";
                    chatPanel.addChatMessage(m1);
                    
                    scoreboardPanel.nextPlayer = 0;
                    scoreboardPanel.repaint();
                    
                    if(amIAdmin) {
                        window.miStartGame.setEnabled(true);
                        window.miRestartGame.setEnabled(true);
                        window.miCloseGame.setEnabled(true);
                    }
                }
                break;
            case "GamePausedMessage":
                {
                    gamePanel.waitYourTurn();
                    RoomMessages.ChatMessage m1 = new RoomMessages.ChatMessage();
                    m1.info = true; m1.chatMessage = "Game is paused.";
                    chatPanel.addChatMessage(m1);
                }
                break;
            case "GameUnpausedMessage":
                {
                    
                }
                break;
            case "GameRestartedMessage":
                {
                    gamePanel.clearTable();
                    gamePanel.waitYourTurn();
                    RoomMessages.ChatMessage m1 = new RoomMessages.ChatMessage();
                    m1.info = true; m1.chatMessage = "Admin restarted the game.";
                    chatPanel.addChatMessage(m1);
                    scoreboardPanel.nextPlayer = 0;
                    scoreboardPanel.repaint();
                }
                break;
            case "WinnerMessage":
                {
                    RoomMessages.WinnerMessage m1 = (RoomMessages.WinnerMessage) message;
                    JOptionPane.showMessageDialog(window, "Player "+ m1.playerId + " has won a game.", "Winner", JOptionPane.INFORMATION_MESSAGE);
                    scoreboardPanel.addWin(m1.index);
                    RoomMessages.ChatMessage m2 = new RoomMessages.ChatMessage();
                    m2.info = true; m2.chatMessage = "Player "+ m1.playerId + " has won a game.";
                    chatPanel.addChatMessage(m2);
                }
                break;
            case "PlayMessage":
                {
                    RoomMessages.PlayMessage m1 = (RoomMessages.PlayMessage) message;
                    gamePanel.addLetter(m1.index, m1.x, m1.y);
                    scoreboardPanel.nextPlayer = scoreboardPanel.nextPlayer + 1;
                    if( scoreboardPanel.nextPlayer == 4 )
                        scoreboardPanel.nextPlayer = 0;
                    scoreboardPanel.repaint();
                            
                }
                break;
        }
    }
}
