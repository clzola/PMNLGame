/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package clzola.pmnlgame.client.gui;

import clzola.pmnlgame.client.NetworkListener;
import clzola.pmnlgame.client.ServerEndpoint;
import clzola.pmnlgame.client.ServerEndpointManager;
import clzola.pmnlgame.message.AuthServerMessages;
import clzola.pmnlgame.message.RoomMessages;
import clzola.pmnlgame.message.ServerMessages;
import clzola.pmnlgame.share.RoomInfo;
import com.alee.extended.layout.VerticalFlowLayout;
import com.alee.extended.window.PopOverDirection;
import com.alee.extended.window.WebPopOver;
import com.alee.laf.label.WebLabel;
import com.alee.laf.text.WebPasswordField;
import com.alee.laf.text.WebTextField;
import com.esotericsoftware.kryo.Kryo;
import com.esotericsoftware.kryonet.Client;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.font.TextAttribute;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Lazar
 */
public class LoginView extends View {

    /**
     * Creates new form LoginView
     */
    public LoginView(ClientWindow window) {
        super("login", window);
        initComponents();
        
        Username.setInputPrompt("username");
        Password.setInputPrompt("password");
        
        SelectedServer.setVisible(false);
        
        usernameNotValidPopOver = new WebPopOver( this.window );
        usernameNotValidPopOver.setCloseOnFocusLoss ( true );
        usernameNotValidPopOver.setMargin ( 10 );
        usernameNotValidPopOver.setLayout ( new VerticalFlowLayout () );
        usernameNotValidPopOver.add ( new WebLabel ( "Username is not valid" ) );
        
        usernameIsEmpty = new WebPopOver( this.window );
        usernameIsEmpty.setCloseOnFocusLoss ( true );
        usernameIsEmpty.setMargin ( 10 );
        usernameIsEmpty.setLayout ( new VerticalFlowLayout () );
        usernameIsEmpty.add ( new WebLabel ( "Please enter username." ) );
        
        passwordIsEmpty = new WebPopOver( this.window );
        passwordIsEmpty.setCloseOnFocusLoss ( true );
        passwordIsEmpty.setMargin ( 10 );
        passwordIsEmpty.setLayout ( new VerticalFlowLayout () );
        passwordIsEmpty.add ( new WebLabel ( "Please enter password." ) );
        
        this.setFocusable(true);
        
        registerRegularFont = Register.getFont();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GameLogo = new javax.swing.JLabel();
        Username = new com.alee.laf.text.WebTextField();
        Password = new com.alee.laf.text.WebPasswordField();
        SelectedServer = new javax.swing.JLabel();
        Register = new javax.swing.JLabel();

        setBackground(new java.awt.Color(1, 1, 1));
        setPreferredSize(new java.awt.Dimension(640, 520));

        GameLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/clzola/pmnlgame/resources/icon.png"))); // NOI18N

        Username.setPreferredSize(new java.awt.Dimension(128, 26));
        Username.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                UsernameFocusGained(evt);
            }
        });
        Username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsernameActionPerformed(evt);
            }
        });

        Password.setPreferredSize(new java.awt.Dimension(128, 26));
        Password.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                PasswordFocusGained(evt);
            }
        });
        Password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasswordActionPerformed(evt);
            }
        });

        SelectedServer.setBackground(new java.awt.Color(153, 153, 153));
        SelectedServer.setForeground(new java.awt.Color(153, 153, 153));
        SelectedServer.setText("Selected server:");

        Register.setForeground(new java.awt.Color(54, 153, 254));
        Register.setText("Register");
        Register.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Register.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RegisterMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                RegisterMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                RegisterMouseExited(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(211, 211, 211)
                .addComponent(GameLogo)
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Password, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Username, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(187, 187, 187))
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(SelectedServer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Register)
                .addGap(8, 8, 8))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(224, 224, 224)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(GameLogo)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(Username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11)
                                .addComponent(Password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 201, Short.MAX_VALUE)
                        .addComponent(SelectedServer))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Register)))
                .addGap(8, 8, 8))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void UsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsernameActionPerformed
        if( validateLoginForm(Username, Password) ) {
            if( ServerEndpointManager.getInstance().getSelectedServer() == null ) {
                ServersListDialog dialog = new ServersListDialog(window, true, true);
                dialog.setLocationRelativeTo(window);
            } else {
                Client client1 = new Client();  

                client1.addListener(new NetworkListener(client, window));
                client1.start();

                // Register messages.
                Kryo kryo = client1.getKryo();
                kryo.register(AuthServerMessages.AuthMessage.class);
                kryo.register(AuthServerMessages.AuthAcceptMessage.class);
                kryo.register(AuthServerMessages.AuthFailedMessage.class);
                kryo.register(ServerMessages.JoinServerMessage.class);
                kryo.register(ServerMessages.JoinRoomMessage.class);
                kryo.register(ServerMessages.CreateRoomMessage.class);
                kryo.register(ServerMessages.CreateJoinRoomMessage.class);
                kryo.register(ServerMessages.LeaveRoomMessage.class);
                kryo.register(RoomInfo[].class);
                kryo.register(RoomInfo.class);
                kryo.register(ServerMessages.ListRoomsMessage.class);
                kryo.register(ServerMessages.ErrorMessage.class);
                kryo.register(String[].class);
                kryo.register(String.class);
                kryo.register(int[].class);
                kryo.register(int.class);
                kryo.register(RoomMessages.PlayerJoinedMessage.class);
                kryo.register(RoomMessages.PlayerLeftMessage.class);
                kryo.register(RoomMessages.YouAreAdminMessage.class);
                kryo.register(RoomMessages.ChatMessage.class);
                kryo.register(RoomMessages.YouAreNextMessage.class);
                kryo.register(RoomMessages.PlayMessage.class);
                kryo.register(RoomMessages.PlayersListMessage.class);
                kryo.register(RoomMessages.LettersListMessage.class);
                kryo.register(RoomMessages.StartGameMessage.class);
                kryo.register(RoomMessages.PauseGameMessage.class);
                kryo.register(RoomMessages.UnpauseGameMessage.class);
                kryo.register(RoomMessages.CloseGameMessage.class);
                kryo.register(RoomMessages.RestartGameMessage.class);
                kryo.register(RoomMessages.GameStartedMessage.class);
                kryo.register(RoomMessages.GamePausedMessage.class);
                kryo.register(RoomMessages.GameUnpausedMessage.class); 
                kryo.register(RoomMessages.GameRestartedMessage.class); 
                kryo.register(RoomMessages.WinnerMessage.class);

                window.attachClient(client1);
                window.getView("login").setClient(client1);
                window.getView("lobby").setClient(client1);
                window.getView("game").setClient(client1);
            
                ServerEndpoint server = ServerEndpointManager.getInstance().getSelectedServer();
                try {
                    client1.connect(5000, server.serverAddress, server.authServerPort);
                    
                    String username = this.Username.getText();
                    String password = new String(Password.getPassword());
                    
                    MessageDigest md = MessageDigest.getInstance("MD5");
                    byte[] hash = md.digest(password.getBytes("UTF-8"));

                    //converting byte array to Hexadecimal String
                    StringBuilder sb = new StringBuilder(2*hash.length);
                    for(byte b : hash) sb.append(String.format("%02x", b&0xff));

                    password = sb.toString();
                    
                    AuthServerMessages.AuthMessage auth = new AuthServerMessages.AuthMessage();
                    auth.username = username;
                    auth.password = password;
                    
                    client1.sendTCP(auth);
                } catch (IOException | NoSuchAlgorithmException ex) {
                    Logger.getLogger(LoginView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_UsernameActionPerformed

    private void PasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasswordActionPerformed
        if( validateLoginForm(Username, Password) ) {
            if( ServerEndpointManager.getInstance().getSelectedServer() == null ) {
                ServersListDialog dialog = new ServersListDialog(window, true, true);
                dialog.setLocationRelativeTo(window);
            } else {
                Client client1 = new Client();  

                client1.addListener(new NetworkListener(client, window));
                client1.start();

                // Register messages.
                Kryo kryo = client1.getKryo();
                kryo.register(AuthServerMessages.AuthMessage.class);
                kryo.register(AuthServerMessages.AuthAcceptMessage.class);
                kryo.register(AuthServerMessages.AuthFailedMessage.class);
                kryo.register(ServerMessages.JoinServerMessage.class);
                kryo.register(ServerMessages.JoinRoomMessage.class);
                kryo.register(ServerMessages.CreateRoomMessage.class);
                kryo.register(ServerMessages.CreateJoinRoomMessage.class);
                kryo.register(ServerMessages.LeaveRoomMessage.class);
                kryo.register(RoomInfo[].class);
                kryo.register(RoomInfo.class);
                kryo.register(ServerMessages.ListRoomsMessage.class);
                kryo.register(ServerMessages.ErrorMessage.class);
                kryo.register(String[].class);
                kryo.register(String.class);
                kryo.register(int[].class);
                kryo.register(int.class);
                kryo.register(RoomMessages.PlayerJoinedMessage.class);
                kryo.register(RoomMessages.PlayerLeftMessage.class);
                kryo.register(RoomMessages.YouAreAdminMessage.class);
                kryo.register(RoomMessages.ChatMessage.class);
                kryo.register(RoomMessages.YouAreNextMessage.class);
                kryo.register(RoomMessages.PlayMessage.class);
                kryo.register(RoomMessages.PlayersListMessage.class);
                kryo.register(RoomMessages.LettersListMessage.class);
                kryo.register(RoomMessages.StartGameMessage.class);
                kryo.register(RoomMessages.PauseGameMessage.class);
                kryo.register(RoomMessages.UnpauseGameMessage.class);
                kryo.register(RoomMessages.CloseGameMessage.class);
                kryo.register(RoomMessages.RestartGameMessage.class);
                kryo.register(RoomMessages.GameStartedMessage.class);
                kryo.register(RoomMessages.GamePausedMessage.class);
                kryo.register(RoomMessages.GameUnpausedMessage.class); 
                kryo.register(RoomMessages.GameRestartedMessage.class); 
                kryo.register(RoomMessages.WinnerMessage.class);
                kryo.register(RoomMessages.ChangePasswordMessage.class);

                window.attachClient(client1);
                window.getView("login").setClient(client1);
                window.getView("lobby").setClient(client1);
                window.getView("game").setClient(client1);
            
                ServerEndpoint server = ServerEndpointManager.getInstance().getSelectedServer();
                try {
                    client1.connect(5000, server.serverAddress, server.authServerPort);
                    
                    String username = this.Username.getText();
                    String password = new String(Password.getPassword());
                    
                    MessageDigest md = MessageDigest.getInstance("MD5");
                    byte[] hash = md.digest(password.getBytes("UTF-8"));

                    //converting byte array to Hexadecimal String
                    StringBuilder sb = new StringBuilder(2*hash.length);
                    for(byte b : hash) sb.append(String.format("%02x", b&0xff));

                    password = sb.toString();
                    
                    AuthServerMessages.AuthMessage auth = new AuthServerMessages.AuthMessage();
                    auth.username = username;
                    auth.password = password;
                    
                    client1.sendTCP(auth);
                } catch (IOException | NoSuchAlgorithmException ex) {
                    Logger.getLogger(LoginView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_PasswordActionPerformed

    private void RegisterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RegisterMouseClicked
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI("http://pmnlgame.dev/register.php"));
            } catch (IOException ex) { 
                Logger.getLogger(LoginView.class.getName()).log(Level.SEVERE, null, ex);
            } catch (URISyntaxException ex) {
                Logger.getLogger(LoginView.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else { 
            JOptionPane.showMessageDialog(this, "Error while executing action.", "Unknown error", JOptionPane.ERROR);
        }
    }//GEN-LAST:event_RegisterMouseClicked

    private void RegisterMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RegisterMouseEntered
        Font font = Register.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        Register.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_RegisterMouseEntered

    private void RegisterMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RegisterMouseExited
        Register.setFont(registerRegularFont);
    }//GEN-LAST:event_RegisterMouseExited

    private void UsernameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_UsernameFocusGained
        usernameIsEmpty.dispose();
        usernameNotValidPopOver.dispose();
        passwordIsEmpty.dispose();
    }//GEN-LAST:event_UsernameFocusGained

    private void PasswordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PasswordFocusGained
        usernameIsEmpty.dispose();
        usernameNotValidPopOver.dispose();
        passwordIsEmpty.dispose();
    }//GEN-LAST:event_PasswordFocusGained

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel GameLogo;
    protected com.alee.laf.text.WebPasswordField Password;
    private javax.swing.JLabel Register;
    public javax.swing.JLabel SelectedServer;
    public com.alee.laf.text.WebTextField Username;
    // End of variables declaration//GEN-END:variables

    protected final WebPopOver usernameNotValidPopOver;
    protected final WebPopOver usernameIsEmpty;
    protected final WebPopOver passwordIsEmpty;
    
    private Font registerRegularFont;
    
    @Override
    public void load() {
        window.setTitle("PMNL Game Client - Login");
        window.miConnect.setEnabled(true);
        window.miDisconnect.setEnabled(false);
        window.miPlayOffline.setEnabled(true);
        window.miJoinRoom.setEnabled(false);
        window.miCreateRoom.setEnabled(false);
        window.miLeaveRoom.setEnabled(false);
        window.RoomMenu.setEnabled(false);
        
        ServerEndpoint server = ServerEndpointManager.getInstance().getSelectedServer();
        if( server != null ) {
            this.SelectedServer.setText("Selected server: " + server.serverName);
            this.SelectedServer.setVisible(true);
        } else {
            this.SelectedServer.setVisible(false);
        }
    }

    @Override
    public void unload() {
        window.miDisconnect.setEnabled(true);
        window.miJoinRoom.setEnabled(true);
        window.miCreateRoom.setEnabled(true);
        window.miLeaveRoom.setEnabled(true);
        window.RoomMenu.setEnabled(true);
        
        this.Password.setText(null);
    }
    
    @Override protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.setColor(Color.WHITE);
        g.drawLine(290, 208, 290, 311);
    }
    
    public boolean validateLoginForm(WebTextField username, WebPasswordField password) {
        String sUsername = username.getText().trim();
        char[] sPassword = password.getPassword();
        
        if( sUsername.length() == 0 ) {
            usernameIsEmpty.show ( Username, PopOverDirection.right );
            return false;
        }
        
        if( sPassword.length == 0 ) {
            passwordIsEmpty.show( Password, PopOverDirection.right );
            return false; 
        }
        
        return true;
    }
}
