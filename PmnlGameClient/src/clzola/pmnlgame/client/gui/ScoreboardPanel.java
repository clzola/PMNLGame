/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package clzola.pmnlgame.client.gui;

import com.alee.extended.layout.NotificationsLayout;
import com.alee.laf.button.WebButton;
import com.alee.managers.notification.NotificationIcon;
import com.alee.managers.notification.NotificationManager;
import com.alee.managers.notification.WebNotificationPopup;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

/**
 *
 * @author clzola
 */
public class ScoreboardPanel extends javax.swing.JPanel {
    private BufferedImage GameTable;
    private BufferedImage Trophy;
    private BufferedImage[] GameLetters;
    private PlayerInfo[] Players;
    private Font font;
    public int nextPlayer = -1;

    /**
     * Creates new form ScoreboardPanel
     */
    public ScoreboardPanel() {
        initComponents();
        Players = new PlayerInfo[4];
        font = new Font("DejaVu Sans", Font.BOLD, 12);
        
        try {
            GameTable = ImageIO.read(getClass().getResource("/clzola/pmnlgame/resources/table.jpg"));
            Trophy = ImageIO.read(getClass().getResource("/clzola/pmnlgame/resources/rsz_trophy.png"));
            GameLetters = new BufferedImage[] {
                    ImageIO.read(getClass().getResource("/clzola/pmnlgame/resources/P.jpg")),
                    ImageIO.read(getClass().getResource("/clzola/pmnlgame/resources/M.jpg")),
                    ImageIO.read(getClass().getResource("/clzola/pmnlgame/resources/N.jpg")),
                    ImageIO.read(getClass().getResource("/clzola/pmnlgame/resources/L.jpg"))
            };
        } catch (IOException ex) {
            Logger.getLogger(GamePanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(255, 380));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 255, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 385, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override public void paintComponent(Graphics grphcs) {
        grphcs.setColor(new Color(237,237,237));
        grphcs.fillRect(0, 0, 640, 520);
        
        int iter = 0;
        for(PlayerInfo player : Players) {
            if( player != null ) {
                drawPlayerInfo((Graphics2D) grphcs, player, iter);
                iter++;
            }
        }
        
    }
    
    public void addPlayer(String name, int index, boolean t) {
        this.Players[index] = new PlayerInfo(index, name, 0);
        this.repaint();
        
        System.out.println("Adding player");
        
        if(t) {
            final WebNotificationPopup notificationPopup = new WebNotificationPopup ();
            notificationPopup.setIcon ( NotificationIcon.plus);
            notificationPopup.setDisplayTime ( 5000 );
            notificationPopup.setContent("New player has joined room.");
            //notificationPopup.set
            NotificationManager.setLocation(NotificationManager.NORTH_EAST);
            NotificationManager.showNotification(notificationPopup);
        }
    }
    
    public void removePlayer(int index, boolean t) {
        Players[index] = null;
        
        this.repaint();
        if(t){
            final WebNotificationPopup notificationPopup = new WebNotificationPopup ();
            notificationPopup.setIcon ( NotificationIcon.plus);
            notificationPopup.setDisplayTime ( 5000 );
            notificationPopup.setContent("A player has left room.");
            //notificationPopup.set
            NotificationManager.setLocation(NotificationManager.NORTH_EAST);
            NotificationManager.showNotification(notificationPopup);
        }
    }
    
    public void addWin(int index) {
        Players[index].wins++;
        this.repaint();
    }
    
    private void drawPlayerInfo(Graphics2D g, PlayerInfo player, int iter) {
        g.setColor(new Color(142,142,142));
        int offset = 10 + iter*58;
        
        g.fillRect(10, offset, 240 , 48);
        
        g.setColor(Color.BLACK);
        // top
        g.drawLine(10, offset-1, 249, offset-1);
        g.drawLine(10, offset, 249, offset);
        // bottom
        g.drawLine(10, offset+48+1, 249, offset+1+48);
        g.drawLine(10, offset+48, 249, offset+48);
        // left
        g.drawLine(9, offset-1, 9, offset+48+1);
        g.drawLine(10, offset-1, 10, offset+48+1);
        // right
        g.drawLine(249, offset-1, 249, offset+48+1);
        g.drawLine(250, offset-1, 250, offset+48+1);
        
        g.drawImage(GameLetters[player.index], 23, offset+13, null);
        
        // top
        g.drawLine(22, offset+12, 46, offset+12);
        // bottom
        g.drawLine(22, offset+12+24, 46, offset+12+24);
        // left
        g.drawLine(22, offset+12, 22, offset+12+24);
        // right
        g.drawLine(46, offset+12, 46, offset+12+24);
        
        RenderingHints rh =
            new RenderingHints(RenderingHints.KEY_ANTIALIASING, 
            RenderingHints.VALUE_ANTIALIAS_ON);

        rh.put(RenderingHints.KEY_RENDERING,
               RenderingHints.VALUE_RENDER_QUALITY);

        g.setRenderingHints(rh);

        g.setFont(font);
        g.drawString(player.name, 55, offset+29);
        
        g.drawImage(Trophy, 210, offset+6, null);
        g.drawString(""+player.wins, 225, offset+24);
        
        if( nextPlayer == player.index ) {
        // draw triangle indicating next player
            g.setColor(new Color(0,165,0));
            g.fillPolygon(new int[]{5,17,5}, new int[]{offset+10,offset+24,offset+38}, 3);
            g.setColor(Color.BLACK);
            g.drawPolyline(new int[]{5,17,5}, new int[]{offset+10,offset+24,offset+38}, 3);
        }
    }
    
    private class PlayerInfo {
        public int index;
        public String name;
        public int wins;

        public PlayerInfo(int index, String name, int wins) {
            this.index = index;
            this.name = name;
            this.wins = wins;
        }
    }
}
