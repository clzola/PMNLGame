/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package clzola.pmnlgame.client.gui;

import clzola.pmnlgame.client.NetworkListener;
import clzola.pmnlgame.client.ServerEndpoint;
import clzola.pmnlgame.client.ServerEndpointManager;
import clzola.pmnlgame.message.AuthServerMessages;
import clzola.pmnlgame.message.RoomMessages;
import clzola.pmnlgame.message.ServerMessages;
import clzola.pmnlgame.share.RoomInfo;
import com.esotericsoftware.kryo.Kryo;
import com.esotericsoftware.kryonet.Client;
import java.awt.CardLayout;
import java.awt.Desktop;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Lazar
 */
public class ClientWindow extends javax.swing.JFrame {

    /**
     * Creates new form ClientWindow
     */
    public ClientWindow() {
        this.views = new TreeMap<>();
        this.currentViewId = null;
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MenuBar = new javax.swing.JMenuBar();
        GameMenu = new javax.swing.JMenu();
        miConnect = new javax.swing.JMenuItem();
        miDisconnect = new javax.swing.JMenuItem();
        miPlayOffline = new javax.swing.JMenuItem();
        GameMenuSeperator1 = new javax.swing.JPopupMenu.Separator();
        miJoinRoom = new javax.swing.JMenuItem();
        miCreateRoom = new javax.swing.JMenuItem();
        miLeaveRoom = new javax.swing.JMenuItem();
        GameMenuSeperator2 = new javax.swing.JPopupMenu.Separator();
        miRegister = new javax.swing.JMenuItem();
        miServersList = new javax.swing.JMenuItem();
        miQuit = new javax.swing.JMenuItem();
        RoomMenu = new javax.swing.JMenu();
        miStartGame = new javax.swing.JMenuItem();
        miRestartGame = new javax.swing.JMenuItem();
        miCloseGame = new javax.swing.JMenuItem();
        RoomMenuSeperator1 = new javax.swing.JPopupMenu.Separator();
        miAddBot = new javax.swing.JMenuItem();
        RoomMenuSeperator2 = new javax.swing.JPopupMenu.Separator();
        miKickPlayer = new javax.swing.JMenuItem();
        miChangePassword = new javax.swing.JMenuItem();
        miAddOP = new javax.swing.JMenuItem();
        HelpMenu = new javax.swing.JMenu();
        miManual = new javax.swing.JMenuItem();
        miAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new java.awt.CardLayout());

        GameMenu.setText("Game");

        miConnect.setText("Connect");
        miConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miConnectActionPerformed(evt);
            }
        });
        GameMenu.add(miConnect);

        miDisconnect.setText("Disconnect");
        miDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDisconnectActionPerformed(evt);
            }
        });
        GameMenu.add(miDisconnect);

        miPlayOffline.setText("PlayOffline");
        miPlayOffline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miPlayOfflineActionPerformed(evt);
            }
        });
        GameMenu.add(miPlayOffline);
        GameMenu.add(GameMenuSeperator1);

        miJoinRoom.setText("Join Room");
        GameMenu.add(miJoinRoom);

        miCreateRoom.setText("Create Room");
        GameMenu.add(miCreateRoom);

        miLeaveRoom.setText("Leave Room");
        miLeaveRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miLeaveRoomActionPerformed(evt);
            }
        });
        GameMenu.add(miLeaveRoom);
        GameMenu.add(GameMenuSeperator2);

        miRegister.setText("Register");
        miRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRegisterActionPerformed(evt);
            }
        });
        GameMenu.add(miRegister);

        miServersList.setText("Servers List");
        miServersList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miServersListActionPerformed(evt);
            }
        });
        GameMenu.add(miServersList);

        miQuit.setText("Quit");
        miQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miQuitActionPerformed(evt);
            }
        });
        GameMenu.add(miQuit);

        MenuBar.add(GameMenu);

        RoomMenu.setText("Room");

        miStartGame.setText("Start Game");
        miStartGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miStartGameActionPerformed(evt);
            }
        });
        RoomMenu.add(miStartGame);

        miRestartGame.setText("Restart Game");
        miRestartGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRestartGameActionPerformed(evt);
            }
        });
        RoomMenu.add(miRestartGame);

        miCloseGame.setText("Close Game");
        miCloseGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCloseGameActionPerformed(evt);
            }
        });
        RoomMenu.add(miCloseGame);
        RoomMenu.add(RoomMenuSeperator1);

        miAddBot.setText("Add Bot");
        RoomMenu.add(miAddBot);
        RoomMenu.add(RoomMenuSeperator2);

        miKickPlayer.setText("Kick Player");
        miKickPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miKickPlayerActionPerformed(evt);
            }
        });
        RoomMenu.add(miKickPlayer);

        miChangePassword.setText("Change Password");
        miChangePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miChangePasswordActionPerformed(evt);
            }
        });
        RoomMenu.add(miChangePassword);

        miAddOP.setText("Add OP");
        miAddOP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAddOPActionPerformed(evt);
            }
        });
        RoomMenu.add(miAddOP);

        MenuBar.add(RoomMenu);

        HelpMenu.setText("Help");

        miManual.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        miManual.setText("Manual");
        HelpMenu.add(miManual);

        miAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        miAbout.setText("About");
        HelpMenu.add(miAbout);

        MenuBar.add(HelpMenu);

        setJMenuBar(MenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDisconnectActionPerformed
        client.close();
        client.stop();
        changeView("login");
    }//GEN-LAST:event_miDisconnectActionPerformed

    private void miQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miQuitActionPerformed
        // If client is connected send disconnect signal and then exit
        if(client.isConnected())  {
            client.close();
            client.stop();
        }
        System.exit(0);
    }//GEN-LAST:event_miQuitActionPerformed

    private void miServersListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miServersListActionPerformed
        ServersListDialog dialog = new ServersListDialog(this, true, false);
        dialog.setLocationRelativeTo(this);
    }//GEN-LAST:event_miServersListActionPerformed

    private void miRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miRegisterActionPerformed
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI("http://pmnlgame.dev/register.php"));
            } catch (IOException ex) { 
                Logger.getLogger(LoginView.class.getName()).log(Level.SEVERE, null, ex);
            } catch (URISyntaxException ex) {
                Logger.getLogger(LoginView.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else { 
            JOptionPane.showMessageDialog(this, "Error while executing action.", "Unknown error", JOptionPane.ERROR);
        }
    }//GEN-LAST:event_miRegisterActionPerformed

    private void miConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miConnectActionPerformed
        LoginView view = (LoginView) getView("login");
        if( view.validateLoginForm(view.Username, view.Password) ) {
            if( ServerEndpointManager.getInstance().getSelectedServer() == null ) {
                ServersListDialog dialog = new ServersListDialog(this, true, true);
                dialog.setLocationRelativeTo(this);
            } else {
                Client client1 = new Client();  

                client1.addListener(new NetworkListener(client, this));
                client1.start();

                // Register messages.
                Kryo kryo = client1.getKryo();
                kryo.register(AuthServerMessages.AuthMessage.class);
                kryo.register(AuthServerMessages.AuthAcceptMessage.class);
                kryo.register(AuthServerMessages.AuthFailedMessage.class);
                kryo.register(ServerMessages.JoinServerMessage.class);
                kryo.register(ServerMessages.JoinRoomMessage.class);
                kryo.register(ServerMessages.CreateRoomMessage.class);
                kryo.register(ServerMessages.CreateJoinRoomMessage.class);
                kryo.register(ServerMessages.LeaveRoomMessage.class);
                kryo.register(RoomInfo[].class);
                kryo.register(RoomInfo.class);
                kryo.register(ServerMessages.ListRoomsMessage.class);
                kryo.register(ServerMessages.ErrorMessage.class);
                kryo.register(String[].class);
                kryo.register(String.class);
                kryo.register(int[].class);
                kryo.register(int.class);
                kryo.register(RoomMessages.PlayerJoinedMessage.class);
                kryo.register(RoomMessages.PlayerLeftMessage.class);
                kryo.register(RoomMessages.YouAreAdminMessage.class);
                kryo.register(RoomMessages.ChatMessage.class);
                kryo.register(RoomMessages.YouAreNextMessage.class);
                kryo.register(RoomMessages.PlayMessage.class);
                kryo.register(RoomMessages.PlayersListMessage.class);
                kryo.register(RoomMessages.LettersListMessage.class);
                kryo.register(RoomMessages.StartGameMessage.class);
                kryo.register(RoomMessages.PauseGameMessage.class);
                kryo.register(RoomMessages.UnpauseGameMessage.class);
                kryo.register(RoomMessages.CloseGameMessage.class);
                kryo.register(RoomMessages.RestartGameMessage.class);
                kryo.register(RoomMessages.GameStartedMessage.class);
                kryo.register(RoomMessages.GamePausedMessage.class);
                kryo.register(RoomMessages.GameUnpausedMessage.class); 
                kryo.register(RoomMessages.GameRestartedMessage.class); 
                kryo.register(RoomMessages.WinnerMessage.class);
                kryo.register(RoomMessages.ChangePasswordMessage.class);

                attachClient(client1);
                getView("login").setClient(client1);
                getView("lobby").setClient(client1);
                getView("game").setClient(client1);
            
                ServerEndpoint server = ServerEndpointManager.getInstance().getSelectedServer();
                try {
                    client1.connect(5000, server.serverAddress, server.authServerPort);
                    
                    String username = ((LoginView)getView("login")).Username.getText();
                    String password = new String(((LoginView)getView("login")).Password.getPassword());
                    
                    MessageDigest md = MessageDigest.getInstance("MD5");
                    byte[] hash = md.digest(password.getBytes("UTF-8"));

                    //converting byte array to Hexadecimal String
                    StringBuilder sb = new StringBuilder(2*hash.length);
                    for(byte b : hash) sb.append(String.format("%02x", b&0xff));

                    password = sb.toString();
                    
                    AuthServerMessages.AuthMessage auth = new AuthServerMessages.AuthMessage();
                    auth.username = username;
                    auth.password = password;
                    
                    client1.sendTCP(auth);
                } catch (IOException | NoSuchAlgorithmException ex) {
                    Logger.getLogger(LoginView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_miConnectActionPerformed

    private void miPlayOfflineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miPlayOfflineActionPerformed
        JOptionPane.showMessageDialog(this, "Not supportet yet.");
    }//GEN-LAST:event_miPlayOfflineActionPerformed

    private void miLeaveRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miLeaveRoomActionPerformed
        ServerMessages.LeaveRoomMessage message = new ServerMessages.LeaveRoomMessage();
        client.sendTCP(message);
    }//GEN-LAST:event_miLeaveRoomActionPerformed

    private void miStartGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miStartGameActionPerformed
        client.sendTCP(new RoomMessages.StartGameMessage());
    }//GEN-LAST:event_miStartGameActionPerformed

    private void miRestartGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miRestartGameActionPerformed
        client.sendTCP(new RoomMessages.RestartGameMessage());
    }//GEN-LAST:event_miRestartGameActionPerformed

    private void miCloseGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miCloseGameActionPerformed
        client.sendTCP(new RoomMessages.CloseGameMessage());
    }//GEN-LAST:event_miCloseGameActionPerformed

    private void miKickPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miKickPlayerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_miKickPlayerActionPerformed

    private void miChangePasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miChangePasswordActionPerformed
        String password = JOptionPane.showInputDialog(this, "Enter new password");
        if( password == null || password.equals("")) {
            return;
        }
        
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] hash = md.digest(password.getBytes("UTF-8"));

            //converting byte array to Hexadecimal String
            StringBuilder sb = new StringBuilder(2*hash.length);
            for(byte b : hash) sb.append(String.format("%02x", b&0xff));


            password = sb.toString();
            
            RoomMessages.ChangePasswordMessage message = new RoomMessages.ChangePasswordMessage();
            message.newPassword = password;
            client.sendTCP(message);
        } catch (NoSuchAlgorithmException | UnsupportedEncodingException ex) {
            Logger.getLogger(LobbyView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_miChangePasswordActionPerformed

    private void miAddOPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAddOPActionPerformed
        
    }//GEN-LAST:event_miAddOPActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JMenu GameMenu;
    private javax.swing.JPopupMenu.Separator GameMenuSeperator1;
    private javax.swing.JPopupMenu.Separator GameMenuSeperator2;
    protected javax.swing.JMenu HelpMenu;
    private javax.swing.JMenuBar MenuBar;
    protected javax.swing.JMenu RoomMenu;
    private javax.swing.JPopupMenu.Separator RoomMenuSeperator1;
    private javax.swing.JPopupMenu.Separator RoomMenuSeperator2;
    protected javax.swing.JMenuItem miAbout;
    protected javax.swing.JMenuItem miAddBot;
    protected javax.swing.JMenuItem miAddOP;
    protected javax.swing.JMenuItem miChangePassword;
    protected javax.swing.JMenuItem miCloseGame;
    protected javax.swing.JMenuItem miConnect;
    protected javax.swing.JMenuItem miCreateRoom;
    protected javax.swing.JMenuItem miDisconnect;
    protected javax.swing.JMenuItem miJoinRoom;
    protected javax.swing.JMenuItem miKickPlayer;
    protected javax.swing.JMenuItem miLeaveRoom;
    protected javax.swing.JMenuItem miManual;
    protected javax.swing.JMenuItem miPlayOffline;
    protected javax.swing.JMenuItem miQuit;
    protected javax.swing.JMenuItem miRegister;
    protected javax.swing.JMenuItem miRestartGame;
    protected javax.swing.JMenuItem miServersList;
    protected javax.swing.JMenuItem miStartGame;
    // End of variables declaration//GEN-END:variables

    protected TreeMap<String, View> views;
    protected String currentViewId;
    protected Client client;
    
    public void attachClient(Client client) {
        this.client = client;
    }
    
    public void initialize() {
        CardLayout layout = (CardLayout) getContentPane().getLayout();
        
        layout.show(getContentPane(), currentViewId);
        getView(currentViewId).load();
        pack();
	
        setVisible(true);
    }
    
    public void setStartView(String viewId) {
        this.currentViewId = viewId;
    } 
    
    public void changeView(String viewId) {
        CardLayout layout = (CardLayout) getContentPane().getLayout();
        getView(currentViewId).unload();
        currentViewId = viewId;
        layout.show(getContentPane(), currentViewId);
        getView(currentViewId).load();
        pack();
    }
    
    public void addView(View view) {
        views.put(view.getViewId(), view);
        getContentPane().add(view, view.getViewId());
        view.setClient(client);
    }
	
    public View getView(String view) {
        return views.get(view);
    }
}
