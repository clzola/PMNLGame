package clzola.pmnlgame.client.gui;

import clzola.pmnlgame.client.RoomInfoManager;
import clzola.pmnlgame.message.ServerMessages;
import clzola.pmnlgame.share.RoomInfo;
import java.awt.Color;
import java.awt.Font;
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

public class LobbyView extends View {

    public LobbyView(ClientWindow window) {
        super("lobby", window);
        initComponents();
        
        this.roomManager = RoomInfoManager.getInstance();
        
        DefaultTableCellRenderer centerRenderer = centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        RoomTable.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        RoomTable.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        
        Search.setInputPrompt("Search room");       
        
        Search.getDocument().addDocumentListener(new DocumentListener() {
            @Override public void insertUpdate(DocumentEvent de) {
                searchValueChanged(de);
            }

            @Override public void removeUpdate(DocumentEvent de) {
                searchValueChanged(de);
            }

            @Override public void changedUpdate(DocumentEvent de) {
                
            }
        });
 
        this.setFocusable(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnJoinRoom = new javax.swing.JButton();
        btnCreateRoom = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        spRoomTable = new javax.swing.JScrollPane();
        RoomTable = new javax.swing.JTable();
        Search = new com.alee.laf.text.WebTextField();

        setBackground(new java.awt.Color(251, 235, 212));

        btnJoinRoom.setText("Join Room");
        btnJoinRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnJoinRoomActionPerformed(evt);
            }
        });

        btnCreateRoom.setText("Create Room");
        btnCreateRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateRoomActionPerformed(evt);
            }
        });

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        RoomTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Room Name", "Password", "Players"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        RoomTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        RoomTable.getTableHeader().setReorderingAllowed(false);
        spRoomTable.setViewportView(RoomTable);
        if (RoomTable.getColumnModel().getColumnCount() > 0) {
            RoomTable.getColumnModel().getColumn(0).setResizable(false);
            RoomTable.getColumnModel().getColumn(0).setPreferredWidth(400);
            RoomTable.getColumnModel().getColumn(1).setResizable(false);
            RoomTable.getColumnModel().getColumn(2).setResizable(false);
        }

        Search.setPreferredSize(new java.awt.Dimension(150, 24));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(spRoomTable, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 624, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btnJoinRoom)
                        .addGap(8, 8, 8)
                        .addComponent(btnCreateRoom)
                        .addGap(8, 8, 8)
                        .addComponent(btnRefresh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(8, 8, 8))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnJoinRoom)
                    .addComponent(btnCreateRoom)
                    .addComponent(btnRefresh)
                    .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addComponent(spRoomTable, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE)
                .addGap(8, 8, 8))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        Search.setText(null);
        ServerMessages.ListRoomsMessage message = new ServerMessages.ListRoomsMessage();
        client.sendTCP(message);
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnCreateRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateRoomActionPerformed
        CreateRoomForm form = new CreateRoomForm(window, true);
        form.setLocationRelativeTo(window);
    }//GEN-LAST:event_btnCreateRoomActionPerformed

    private void btnJoinRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnJoinRoomActionPerformed
        int rowIndex = RoomTable.getSelectedRow();
        if( rowIndex == -1 )
            return;
        
        String roomName = (String) RoomTable.getModel().getValueAt(rowIndex, 0);
        String hasPassword = (String) RoomTable.getModel().getValueAt(rowIndex, 1);
        String password = null;
        
        if( hasPassword.equals("Yes") ) {
            password = JOptionPane.showInputDialog(window, "Enter password ("+roomName+")");
            if( password == null || password.equals("")) {
                return;
            }
        }
        
        if( password != null ) { 
            try {
                MessageDigest md = MessageDigest.getInstance("MD5");
                byte[] hash = md.digest(password.getBytes("UTF-8"));
                
                //converting byte array to Hexadecimal String
                StringBuilder sb = new StringBuilder(2*hash.length);
                for(byte b : hash) sb.append(String.format("%02x", b&0xff));
             
                
                password = sb.toString();
            } catch (NoSuchAlgorithmException | UnsupportedEncodingException ex) {
                Logger.getLogger(LobbyView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        ServerMessages.JoinRoomMessage message = new ServerMessages.JoinRoomMessage();
        message.roomId = roomName;
        message.password = password;
        client.sendTCP(message);
    }//GEN-LAST:event_btnJoinRoomActionPerformed
/*
*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable RoomTable;
    private com.alee.laf.text.WebTextField Search;
    protected javax.swing.JButton btnCreateRoom;
    protected javax.swing.JButton btnJoinRoom;
    protected javax.swing.JButton btnRefresh;
    protected javax.swing.JScrollPane spRoomTable;
    // End of variables declaration//GEN-END:variables

  ////////////////////////////////////////////////////////////////
  // User Space
    private RoomInfoManager roomManager;
   
    @Override
    public void load() {
        window.setTitle("PMNL Game Client - Lobby");
        window.miConnect.setEnabled(false);
        window.miPlayOffline.setEnabled(false);
        window.miLeaveRoom.setEnabled(false);
        window.RoomMenu.setEnabled(false);

        btnRefreshActionPerformed(null);
    /*    
        RoomInfoManager manager = RoomInfoManager.getInstance();
        manager.fetchRooms();
        ArrayList<RoomInfo> rooms = manager.getRoomsList();
        refreshTableModel(rooms);
            */
    }
    
    @Override
    public void unload() {
        window.miConnect.setEnabled(true);
        window.miPlayOffline.setEnabled(true);
        window.miLeaveRoom.setEnabled(true);
        window.RoomMenu.setEnabled(true);
    }
    
    public void refreshTableModel(ArrayList<RoomInfo> rooms) {
        DefaultTableModel model = model = (DefaultTableModel) RoomTable.getModel();
        model.setRowCount(0);
        
        for(RoomInfo room : rooms) 
            model.addRow(new String[] {
                room.roomId, ( room.hasPassword == true ? "Yes" : "No"), room.playersCount + "/4" 
            });
    }
    
    private void searchValueChanged(DocumentEvent de) {
        refreshTableModel( roomManager.all(Search.getText().trim()) );
    }
}
